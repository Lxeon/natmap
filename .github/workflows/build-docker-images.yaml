name: Build and Push Multi-arch Docker Images

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'release') ||
      github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.vars.outputs.version }}
      repo_owner_lc: ${{ steps.set-owner.outputs.repo_owner_lc }}
    steps:
      - name: Get release version
        id: vars
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/heiher/natmap/releases/latest | jq -r .tag_name)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="master"
          fi
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Using version: $LATEST_TAG"

      - name: Set lowercase owner name
        id: set-owner
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "repo_owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT

  build_and_push:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            natmap_arch: x86_64
          - arch: arm64
            natmap_arch: arm64
          - arch: arm
            natmap_arch: arm32v7
          - arch: riscv64
            natmap_arch: riscv64
          - arch: s390x
            natmap_arch: s390x
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/${{ matrix.arch }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push platform-specific image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ needs.prepare.outputs.repo_owner_lc }}/natmap:${{ needs.prepare.outputs.version }}-${{ matrix.arch }}
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            ARCH=${{ matrix.natmap_arch }}
          provenance: false
          sbom: false

      - name: Save arch info for manifest
        run: |
          mkdir -p out
          echo "${{ matrix.arch }}=${{ matrix.natmap_arch }}" > out/${{matrix.arch}}

      - name: Upload arch info artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-arch-${{ matrix.arch }}
          path: out/${{matrix.arch}}

  create_multiarch_manifest:
    needs: [prepare, build_and_push]
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all built arch artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: built-arch-*
          path: ./archlist
          merge-multiple: true

      - name: Build image list dynamically
        id: list
        run: |
          IMAGE_NAME="ghcr.io/${{ needs.prepare.outputs.repo_owner_lc }}/natmap"
          IMAGE_TAG="${{ needs.prepare.outputs.version }}"
          IMAGE_ARGS=""
          ls -l ./archlist/
          for FILE in ./archlist/*; do
            ARCH=$(cut -d= -f1 "$FILE")
            echo "Found built arch: $ARCH"
            IMAGE_ARGS="$IMAGE_ARGS --amend $IMAGE_NAME:$IMAGE_TAG-$ARCH"
          done

          echo "image_args=$IMAGE_ARGS" >> $GITHUB_OUTPUT

      - name: Create and push manifest for versioned tag
        run: |
          docker manifest create ghcr.io/${{ needs.prepare.outputs.repo_owner_lc }}/natmap:${{ needs.prepare.outputs.version }} \
            ${{ steps.list.outputs.image_args }}

          docker manifest push ghcr.io/${{ needs.prepare.outputs.repo_owner_lc }}/natmap:${{ needs.prepare.outputs.version }}

      - name: Create and push manifest for latest tag
        run: |
          docker manifest create ghcr.io/${{ needs.prepare.outputs.repo_owner_lc }}/natmap:latest \
            ${{ steps.list.outputs.image_args }}

          docker manifest push ghcr.io/${{ needs.prepare.outputs.repo_owner_lc }}/natmap:latest

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Delete current run's built artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.run_id }}
        run: |
          echo "Deleting built-arch-* artifacts for run ID: $RUN_ID"

          gh api \
            "repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts" \
            -q '.artifacts[] | select(.name | startswith("built-arch-")) | .id' |
          while read ARTIFACT_ID; do
            echo "Deleting artifact ID: $ARTIFACT_ID"
            gh api --method DELETE "repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID"
          done
